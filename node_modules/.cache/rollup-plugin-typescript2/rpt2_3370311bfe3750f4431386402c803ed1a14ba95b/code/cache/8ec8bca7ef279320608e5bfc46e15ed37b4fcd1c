{"code":"// ------------------------------------------------------------------------------------------\r\n//  SIDEBAR-CARD\r\n// ------------------------------------------------------------------------------------------\r\n//  https://github.com/DBuit/sidebar-card\r\n// ------------------------------------------------------------------------------------------\r\n// ##########################################################################################\r\n// ###   Global constants\r\n// ##########################################################################################\r\nconst SIDEBAR_CARD_TITLE = 'SIDEBAR-CARD';\r\nconst SIDEBAR_CARD_VERSION = '0.1.9.7.0';\r\n// ##########################################################################################\r\n// ###   Import dependencies\r\n// ##########################################################################################\r\nimport { css, html, LitElement } from 'lit-element';\r\nimport { moreInfo } from 'card-tools/src/more-info';\r\nimport { hass, provideHass } from 'card-tools/src/hass';\r\nimport { subscribeRenderTemplate } from 'card-tools/src/templates';\r\nimport moment from 'moment/min/moment-with-locales';\r\nimport { forwardHaptic, navigate, toggleEntity } from 'custom-card-helpers';\r\n// ##########################################################################################\r\n// ###   The actual Sidebar Card element\r\n// ##########################################################################################\r\nclass SidebarCard extends LitElement {\r\n    /* **************************************** *\r\n     *           Element constructor            *\r\n     * **************************************** */\r\n    //Markus:\r\n    // Binds the location change handler to update the active menu item with a short delay\r\n    constructor() {\r\n        super();\r\n        this.templateLines = [];\r\n        this.clock = false;\r\n        this.updateMenu = true;\r\n        this.digitalClock = false;\r\n        this.twelveHourVersion = false;\r\n        this.digitalClockWithSeconds = false;\r\n        this.period = false;\r\n        this.date = false;\r\n        this.dateFormat = 'DD MMMM';\r\n        this.bottomCard = null;\r\n        this.CUSTOM_TYPE_PREFIX = 'custom:';\r\n        // Markus:\r\n        // Stores the setInterval handle for the periodic clock update\r\n        // Stores the setInterval handle for the periodic date update\r\n        // Stores the bound event handler function for the 'location-changed' event, used to update the active menu item with the correct `this` context\r\n        this._clockInterval = null;\r\n        this._dateInterval = null;\r\n        this._boundLocationChange = () => {\r\n            setTimeout(() => this._updateActiveMenu(), 50);\r\n        };\r\n    }\r\n    /* **************************************** *\r\n     *        Element's public properties       *\r\n     * **************************************** */\r\n    static get properties() {\r\n        return {\r\n            hass: {},\r\n            config: {},\r\n            active: {},\r\n        };\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        //Markus:\r\n        // Starts the observer for URL changes\r\n        window.addEventListener('location-changed', this._boundLocationChange);\r\n        //Markus:\r\n        // Executes logic when the card is first connected\r\n        if (this._clockInterval)\r\n            this._runClock();\r\n        if (this._dateInterval)\r\n            this._runDate();\r\n        this._updateActiveMenu();\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        // Markus:\r\n        // Stops the observer for URL changes to prevent memory leaks\r\n        window.removeEventListener('location-changed', this._boundLocationChange);\r\n        // Markus:\r\n        // Stops the timers for date and clock when the card is no longer visible\r\n        if (this._dateInterval) {\r\n            clearInterval(this._dateInterval);\r\n            this._dateInterval = null;\r\n        }\r\n        if (this._clockInterval) {\r\n            clearInterval(this._clockInterval);\r\n            this._clockInterval = null;\r\n        }\r\n    }\r\n    /* **************************************** *\r\n     *   Element's HTML renderer (lit-element)  *\r\n     * **************************************** */\r\n    render() {\r\n        const sidebarMenu = this.config.sidebarMenu;\r\n        const title = 'title' in this.config ? this.config.title : false;\r\n        const addStyle = 'style' in this.config;\r\n        this.clock = this.config.clock ? this.config.clock : false;\r\n        this.digitalClock = this.config.digitalClock ? this.config.digitalClock : false;\r\n        this.digitalClockWithSeconds = this.config.digitalClockWithSeconds ? this.config.digitalClockWithSeconds : false;\r\n        this.twelveHourVersion = this.config.twelveHourVersion ? this.config.twelveHourVersion : false;\r\n        this.period = this.config.period ? this.config.period : false;\r\n        this.date = this.config.date ? this.config.date : false;\r\n        this.dateFormat = this.config.dateFormat ? this.config.dateFormat : 'DD MMMM';\r\n        this.bottomCard = this.config.bottomCard ? this.config.bottomCard : null;\r\n        this.updateMenu = this.config.hasOwnProperty('updateMenu') ? this.config.updateMenu : true;\r\n        return html `\n      ${addStyle\r\n            ? html `\n            <style>\n              ${this.config.style}\n            </style>\n          `\r\n            : html ``}\n\n      <div class=\"sidebar-inner\">\n        ${this.digitalClock\r\n            ? html `\n              <h1 class=\"digitalClock${title ? ' with-title' : ''}${this.digitalClockWithSeconds ? ' with-seconds' : ''}\"></h1>\n            `\r\n            : html ``}\n        ${this.clock\r\n            ? html `\n              <div class=\"clock\">\n                <div class=\"wrap\">\n                  <span class=\"hour\"></span>\n                  <span class=\"minute\"></span>\n                  <span class=\"second\"></span>\n                  <span class=\"dot\"></span>\n                </div>\n              </div>\n            `\r\n            : html ``}\n        ${title\r\n            ? html `\n              <h1 class=\"title\">${title}</h1>\n            `\r\n            : html ``}\n        ${this.date\r\n            ? html `\n              <h2 class=\"date\"></h2>\n            `\r\n            : html ``}\n        ${sidebarMenu && sidebarMenu.length > 0\r\n            ? html `\n              <ul class=\"sidebarMenu\">\n                ${sidebarMenu.map((sidebarMenuItem) => {\r\n                return html `\n                    <li @click=\"${(e) => this._menuAction(e)}\" class=\"${sidebarMenuItem.state && this.hass.states[sidebarMenuItem.state].state != 'off' && this.hass.states[sidebarMenuItem.state].state != 'unavailable' ? 'active' : ''}\" data-type=\"${sidebarMenuItem.action}\" data-path=\"${sidebarMenuItem.navigation_path ? sidebarMenuItem.navigation_path : ''}\" data-menuitem=\"${JSON.stringify(sidebarMenuItem)}\">\n                      <span>${sidebarMenuItem.name}</span>\n                      ${sidebarMenuItem.icon\r\n                    ? html `\n                            <ha-icon @click=\"${(e) => this._menuAction(e)}\" icon=\"${sidebarMenuItem.icon}\"></ha-icon>\n                          `\r\n                    : html ``}\n                    </li>\n                  `;\r\n            })}\n              </ul>\n            `\r\n            : html ``}\n        ${this.config.template\r\n            ? html `\n              <ul class=\"template\">\n                ${this.templateLines.map((line) => {\r\n                return html `\n                    ${createElementFromHTML(line)}\n                  `;\r\n            })}\n              </ul>\n            `\r\n            : html ``}\n        ${this.bottomCard\r\n            ? html `\n              <div class=\"bottom\"></div>\n            `\r\n            : html ``}\n      </div>\n    `;\r\n    }\r\n    _runClock() {\r\n        let hoursampm;\r\n        let digitalTime;\r\n        const date = new Date();\r\n        let fullHours = date.getHours().toString();\r\n        const realHours = date.getHours();\r\n        const hours = ((realHours + 11) % 12) + 1;\r\n        const minutes = date.getMinutes();\r\n        const seconds = date.getSeconds();\r\n        const hour = Math.floor((hours * 60 + minutes) / 2);\r\n        const minute = minutes * 6;\r\n        const second = seconds * 6;\r\n        if (this.clock) {\r\n            this.shadowRoot.querySelector('.hour').style.transform = `rotate(${hour}deg)`;\r\n            this.shadowRoot.querySelector('.minute').style.transform = `rotate(${minute}deg)`;\r\n            this.shadowRoot.querySelector('.second').style.transform = `rotate(${second}deg)`;\r\n        }\r\n        if (this.digitalClock && !this.twelveHourVersion) {\r\n            const minutesString = minutes.toString();\r\n            digitalTime = fullHours.length < 2 ? '0' + fullHours + ':' : fullHours + ':';\r\n            if (this.digitalClockWithSeconds) {\r\n                digitalTime += minutesString.length < 2 ? '0' + minutesString + ':' : minutesString + ':';\r\n                const secondsString = seconds.toString();\r\n                digitalTime += secondsString.length < 2 ? '0' + secondsString : secondsString;\r\n            }\r\n            else {\r\n                digitalTime += minutesString.length < 2 ? '0' + minutesString : minutesString;\r\n            }\r\n            this.shadowRoot.querySelector('.digitalClock').textContent = digitalTime;\r\n        }\r\n        else if (this.digitalClock && this.twelveHourVersion && !this.period) {\r\n            hoursampm = date.getHours();\r\n            hoursampm = hoursampm % 12;\r\n            hoursampm = hoursampm ? hoursampm : 12;\r\n            fullHours = hoursampm.toString();\r\n            const minutesString = minutes.toString();\r\n            digitalTime = fullHours.length < 2 ? '0' + fullHours + ':' : fullHours + ':';\r\n            if (this.digitalClockWithSeconds) {\r\n                digitalTime += minutesString.length < 2 ? '0' + minutesString + ':' : minutesString + ':';\r\n                const secondsString = seconds.toString();\r\n                digitalTime += secondsString.length < 2 ? '0' + secondsString : secondsString;\r\n            }\r\n            else {\r\n                digitalTime += minutesString.length < 2 ? '0' + minutesString : minutesString;\r\n            }\r\n            //digitalTime;\r\n            this.shadowRoot.querySelector('.digitalClock').textContent = digitalTime;\r\n        }\r\n        else if (this.digitalClock && this.twelveHourVersion && this.period) {\r\n            var ampm = realHours >= 12 ? 'pm' : 'am';\r\n            hoursampm = date.getHours();\r\n            hoursampm = hoursampm % 12;\r\n            hoursampm = hoursampm ? hoursampm : 12;\r\n            fullHours = hoursampm.toString();\r\n            const minutesString = minutes.toString();\r\n            digitalTime = fullHours.length < 2 ? '0' + fullHours + ':' : fullHours + ':';\r\n            if (this.digitalClockWithSeconds) {\r\n                digitalTime += minutesString.length < 2 ? '0' + minutesString + ':' : minutesString + ':';\r\n                const secondsString = seconds.toString();\r\n                digitalTime += secondsString.length < 2 ? '0' + secondsString : secondsString;\r\n            }\r\n            else {\r\n                digitalTime += minutesString.length < 2 ? '0' + minutesString : minutesString;\r\n            }\r\n            digitalTime += ' ' + ampm;\r\n            this.shadowRoot.querySelector('.digitalClock').textContent = digitalTime;\r\n        }\r\n    }\r\n    _runDate() {\r\n        const now = moment();\r\n        now.locale(this.hass.language);\r\n        this.shadowRoot.querySelector('.date').textContent = now.format(this.dateFormat);\r\n    }\r\n    updateSidebarSize(root) {\r\n        const sidebarInner = this.shadowRoot.querySelector('.sidebar-inner');\r\n        const header = root.shadowRoot.querySelector('ch-header') || root.shadowRoot.querySelector('app-header');\r\n        const offParam = getParameterByName('sidebarOff');\r\n        let headerHeightPx = getHeaderHeightPx();\r\n        if (sidebarInner) {\r\n            sidebarInner.style.width = this.offsetWidth + 'px';\r\n            if (this.config.hideTopMenu) {\r\n                sidebarInner.style.height = `${window.innerHeight}px`;\r\n                sidebarInner.style.top = '0px';\r\n            }\r\n            else {\r\n                sidebarInner.style.height = `calc(${window.innerHeight}px - ` + headerHeightPx + `)`;\r\n                sidebarInner.style.top = headerHeightPx;\r\n            }\r\n        }\r\n    }\r\n    firstUpdated() {\r\n        provideHass(this);\r\n        let root = getRoot();\r\n        // Markus:\r\n        // new function _boundLocationChange will be used instead\r\n        /*\r\n        root.shadowRoot.querySelectorAll('paper-tab').forEach((paperTab) => {\r\n          log2console('firstUpdated', 'Menu item found');\r\n          paperTab.addEventListener('click', () => {\r\n            this._updateActiveMenu();\r\n          });\r\n        });\r\n        */\r\n        const self = this;\r\n        if (this.clock || this.digitalClock) {\r\n            const inc = 1000;\r\n            self._runClock();\r\n            // Stores the interval ID for the periodic clock update\r\n            this._clockInterval = setInterval(function () {\r\n                self._runClock();\r\n            }, inc);\r\n        }\r\n        if (this.date) {\r\n            const inc = 1000 * 60 * 60;\r\n            self._runDate();\r\n            // Stores the interval ID for the periodic date update\r\n            this._dateInterval = setInterval(function () {\r\n                self._runDate();\r\n            }, inc);\r\n        }\r\n        setTimeout(() => {\r\n            self.updateSidebarSize(root);\r\n            self._updateActiveMenu();\r\n        }, 1);\r\n        window.addEventListener('resize', function () {\r\n            setTimeout(() => {\r\n                self.updateSidebarSize(root);\r\n            }, 1);\r\n        }, true);\r\n        if (this.bottomCard) {\r\n            setTimeout(() => {\r\n                var card = {\r\n                    type: this.bottomCard.type,\r\n                };\r\n                card = Object.assign({}, card, this.bottomCard.cardOptions);\r\n                log2console('firstUpdated', 'Bottom card: ', card);\r\n                if (!card || typeof card !== 'object' || !card.type) {\r\n                    error2console('firstUpdated', 'Bottom card config error!');\r\n                }\r\n                else {\r\n                    let tag = card.type;\r\n                    if (tag.startsWith(this.CUSTOM_TYPE_PREFIX))\r\n                        tag = tag.substr(this.CUSTOM_TYPE_PREFIX.length);\r\n                    else\r\n                        tag = `hui-${tag}-card`;\r\n                    const cardElement = document.createElement(tag);\r\n                    cardElement.setConfig(card);\r\n                    cardElement.hass = hass();\r\n                    var bottomSection = this.shadowRoot.querySelector('.bottom');\r\n                    bottomSection.appendChild(cardElement);\r\n                    provideHass(cardElement);\r\n                    if (this.bottomCard.cardStyle && this.bottomCard.cardStyle != '') {\r\n                        let style = this.bottomCard.cardStyle;\r\n                        let itterations = 0;\r\n                        let interval = setInterval(function () {\r\n                            if (cardElement && cardElement.shadowRoot) {\r\n                                window.clearInterval(interval);\r\n                                var styleElement = document.createElement('style');\r\n                                styleElement.innerHTML = style;\r\n                                cardElement.shadowRoot.appendChild(styleElement);\r\n                            }\r\n                            else if (++itterations === 10) {\r\n                                window.clearInterval(interval);\r\n                            }\r\n                        }, 100);\r\n                    }\r\n                }\r\n            }, 2);\r\n        }\r\n    }\r\n    _updateActiveMenu() {\r\n        if (this.updateMenu) {\r\n            this.shadowRoot.querySelectorAll('ul.sidebarMenu li[data-type=\"navigate\"]').forEach((menuItem) => {\r\n                menuItem.classList.remove('active');\r\n            });\r\n            let activeEl = this.shadowRoot.querySelector('ul.sidebarMenu li[data-path=\"' + document.location.pathname + '\"]');\r\n            if (activeEl) {\r\n                activeEl.classList.add('active');\r\n            }\r\n        }\r\n    }\r\n    _menuAction(e) {\r\n        if ((e.target.dataset && e.target.dataset.menuitem) || (e.target.parentNode.dataset && e.target.parentNode.dataset.menuitem)) {\r\n            const menuItem = JSON.parse(e.target.dataset.menuitem || e.target.parentNode.dataset.menuitem);\r\n            this._customAction(menuItem);\r\n            // Markus:\r\n            // This line is commented out because the menu update is now triggered by the 'location-changed' event\r\n            //this._updateActiveMenu();\r\n        }\r\n    }\r\n    _customAction(tapAction) {\r\n        switch (tapAction.action) {\r\n            case 'more-info':\r\n                if (tapAction.entity || tapAction.camera_image) {\r\n                    moreInfo(tapAction.entity ? tapAction.entity : tapAction.camera_image);\r\n                }\r\n                break;\r\n            case 'navigate':\r\n                if (tapAction.navigation_path) {\r\n                    navigate(window, tapAction.navigation_path);\r\n                }\r\n                break;\r\n            case 'url':\r\n                if (tapAction.url_path) {\r\n                    window.open(tapAction.url_path);\r\n                }\r\n                break;\r\n            case 'toggle':\r\n                if (tapAction.entity) {\r\n                    toggleEntity(this.hass, tapAction.entity);\r\n                    forwardHaptic('success');\r\n                }\r\n                break;\r\n            case 'call-service': {\r\n                if (!tapAction.service) {\r\n                    forwardHaptic('failure');\r\n                    return;\r\n                }\r\n                const [domain, service] = tapAction.service.split('.', 2);\r\n                this.hass.callService(domain, service, tapAction.service_data);\r\n                forwardHaptic('success');\r\n            }\r\n        }\r\n    }\r\n    setConfig(config) {\r\n        this.config = config;\r\n        if (this.config.template) {\r\n            subscribeRenderTemplate(null, (res) => {\r\n                const regex = /<(?:li|div)(?:\\s+(?:class|id)\\s*=\\s*\"([^\"]*)\")*\\s*>([^<]*)<\\/(?:li|div)>/g;\r\n                this.templateLines = res.match(regex).map((val) => val);\r\n                this.requestUpdate();\r\n            }, {\r\n                template: this.config.template,\r\n                variables: { config: this.config },\r\n                entity_ids: this.config.entity_ids,\r\n            });\r\n        }\r\n    }\r\n    getCardSize() {\r\n        return 1;\r\n    }\r\n    static get styles() {\r\n        return css `\n      :host {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        // --face-color: #FFF;\n        // --face-border-color: #FFF;\n        // --clock-hands-color: #000;\n        // --clock-seconds-hand-color: #FF4B3E;\n        // --clock-middle-background: #FFF;\n        // --clock-middle-border: #000;\n        // --sidebar-background: #FFF;\n        // --sidebar-text-color: #000;\n        // --sidebar-icon-color: #000;\n        // --sidebar-selected-text-color: #000;\n        // --sidebar-selected-icon-color: #000;\n        background-color:  var(--sidebar-background, var(--paper-listbox-background-color, var(--primary-background-color, #fff)));\n      }\n      .sidebar-inner {\n        padding: 20px;\n        display: flex;\n        flex-direction: column;\n        box-sizing: border-box;\n        position: fixed;\n        width: 0;\n        overflow: hidden auto;\n      }\n      .sidebarMenu {\n        list-style: none;\n        margin: 20px 0;\n        padding: 20px 0;\n        border-top: 1px solid rgba(255, 255, 255, 0.2);\n        border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n      }\n      .sidebarMenu li {\n        color: var(--sidebar-text-color, #000);\n        position: relative;\n        padding: 10px 20px;\n        border-radius: 12px;\n        font-size: 18px;\n        line-height: 24px;\n        font-weight: 300;\n        white-space: normal;\n        display: block;\n        cursor: pointer;\n      }\n      .sidebarMenu li ha-icon {\n        float: right;\n        color: var(--sidebar-icon-color, #000);\n      }\n      .sidebarMenu li.active {\n        color: var(--sidebar-selected-text-color);\n      }\n      .sidebarMenu li.active ha-icon {\n        color: var(--sidebar-selected-icon-color, rgb(247, 217, 89));\n      }\n      .sidebarMenu li.active::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: var(--sidebar-selected-icon-color, #000);\n        opacity: 0.12;\n        border-radius: 12px;\n      }\n      h1 {\n        margin-top: 0;\n        margin-bottom: 20px;\n        font-size: 32px;\n        line-height: 32px;\n        font-weight: 200;\n        color: var(--sidebar-text-color, #000);\n        cursor: default;\n      }\n      h1.digitalClock {\n        font-size: 60px;\n        line-height: 60px;\n        cursor: default;\n      }\n      h1.digitalClock.with-seconds {\n        font-size: 48px;\n        line-height: 48px;\n        cursor: default;\n      }\n      h1.digitalClock.with-title {\n        margin-bottom: 0;\n        cursor: default;\n      }\n      h2 {\n        margin: 0;\n        font-size: 26px;\n        line-height: 26px;\n        font-weight: 200;\n        color: var(--sidebar-text-color, #000);\n        cursor: default;\n      }\n      .template {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n        color: var(--sidebar-text-color, #000);\n      }\n\n      .template li {\n        display: block;\n        color: inherit;\n        font-size: 18px;\n        line-height: 24px;\n        font-weight: 300;\n        white-space: normal;\n      }\n\n      .clock {\n        margin: 20px 0;\n        position: relative;\n        padding-top: calc(100% - 10px);\n        width: calc(100% - 10px);\n        border-radius: 100%;\n        background: var(--face-color, #fff);\n        font-family: 'Montserrat';\n        border: 5px solid var(--face-border-color, #fff);\n        box-shadow: inset 2px 3px 8px 0 rgba(0, 0, 0, 0.1);\n      }\n\n      .clock .wrap {\n        overflow: hidden;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        border-radius: 100%;\n      }\n\n      .clock .minute,\n      .clock .hour {\n        position: absolute;\n        height: 28%;\n        width: 6px;\n        margin: auto;\n        top: -27%;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        background: var(--clock-hands-color, #000);\n        transform-origin: bottom center;\n        transform: rotate(0deg);\n        box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.4);\n        z-index: 1;\n      }\n\n      .clock .minute {\n        position: absolute;\n        height: 41%;\n        width: 4px;\n        top: -38%;\n        left: 0;\n        box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.4);\n        transform: rotate(90deg);\n      }\n\n      .clock .second {\n        position: absolute;\n        top: -48%;\n        height: 48%;\n        width: 2px;\n        margin: auto;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        border-radius: 4px;\n        background: var(--clock-seconds-hand-color, #ff4b3e);\n        transform-origin: bottom center;\n        transform: rotate(180deg);\n        z-index: 1;\n      }\n\n      .clock .dot {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        width: 12px;\n        height: 12px;\n        border-radius: 100px;\n        background: var(--clock-middle-background, #fff);\n        border: 2px solid var(--clock-middle-border, #000);\n        border-radius: 100px;\n        margin: auto;\n        z-index: 1;\n      }\n\n      .bottom {\n        display: flex;\n        margin-top: auto;\n      }\n    `;\r\n    }\r\n}\r\ncustomElements.define('sidebar-card', SidebarCard);\r\n// ##########################################################################################\r\n// ###   The default CSS of the Sidebar Card element\r\n// ##########################################################################################\r\nfunction createCSS(sidebarConfig, width) {\r\n    let sidebarWidth = 25;\r\n    let contentWidth = 75;\r\n    let sidebarResponsive = false;\r\n    let headerHeightPx = getHeaderHeightPx();\r\n    if (sidebarConfig.width) {\r\n        if (typeof sidebarConfig.width == 'number') {\r\n            sidebarWidth = sidebarConfig.width;\r\n            contentWidth = 100 - sidebarWidth;\r\n        }\r\n        else if (typeof sidebarConfig.width == 'object') {\r\n            sidebarWidth = sidebarConfig.desktop;\r\n            contentWidth = 100 - sidebarWidth;\r\n            sidebarResponsive = true;\r\n        }\r\n    }\r\n    // create css\r\n    let css = `\n    #customSidebarWrapper { \n      display:flex;\n      flex-direction:row;\n      overflow:hidden;\n    }\n    #customSidebar.hide {\n      display:none!important;\n      width:0!important;\n    }\n    #view.hideSidebar {\n      width:100%!important;\n    }\n  `;\r\n    if (sidebarResponsive) {\r\n        if (width <= sidebarConfig.breakpoints.mobile) {\r\n            if (sidebarConfig.width.mobile == 0) {\r\n                css +=\r\n                    `\n          #customSidebar {\n            width:` +\r\n                        sidebarConfig.width.mobile +\r\n                        `%;\n            overflow:hidden;\n            display:none;\n            ${sidebarConfig.hideTopMenu ? '' : 'margin-top: calc(' + headerHeightPx + ' + env(safe-area-inset-top));'}\n          } \n          #view {\n            width:` +\r\n                        (100 - sidebarConfig.width.mobile) +\r\n                        `%;\n          ${sidebarConfig.hideTopMenu ? 'padding-top:0!important;margin-top:0!important;' : ''}\n          }\n        `;\r\n            }\r\n            else {\r\n                css +=\r\n                    `\n          #customSidebar {\n            width:` +\r\n                        sidebarConfig.width.mobile +\r\n                        `%;\n            overflow:hidden;\n            ${sidebarConfig.hideTopMenu ? '' : 'margin-top: calc(' + headerHeightPx + ' + env(safe-area-inset-top));'}\n          } \n          #view {\n            width:` +\r\n                        (100 - sidebarConfig.width.mobile) +\r\n                        `%;\n          ${sidebarConfig.hideTopMenu ? 'padding-top:0!important;margin-top:0!important;' : ''}\n          }\n        `;\r\n            }\r\n        }\r\n        else if (width <= sidebarConfig.breakpoints.tablet) {\r\n            if (sidebarConfig.width.tablet == 0) {\r\n                css +=\r\n                    `\n          #customSidebar {\n            width:` +\r\n                        sidebarConfig.width.tablet +\r\n                        `%;\n            overflow:hidden;\n            display:none;\n            ${sidebarConfig.hideTopMenu ? '' : 'margin-top: calc(' + headerHeightPx + ' + env(safe-area-inset-top));'}\n          } \n          #view {\n            width:` +\r\n                        (100 - sidebarConfig.width.tablet) +\r\n                        `%;\n          ${sidebarConfig.hideTopMenu ? 'padding-top:0!important;margin-top:0!important;' : ''}\n          }\n        `;\r\n            }\r\n            else {\r\n                css +=\r\n                    `\n          #customSidebar {\n            width:` +\r\n                        sidebarConfig.width.tablet +\r\n                        `%;\n            overflow:hidden;\n            ${sidebarConfig.hideTopMenu ? '' : 'margin-top: calc(' + headerHeightPx + ' + env(safe-area-inset-top));'}\n          } \n          #view {\n            width:` +\r\n                        (100 - sidebarConfig.width.tablet) +\r\n                        `%;\n          ${sidebarConfig.hideTopMenu ? 'padding-top:0!important;margin-top:0!important;' : ''}\n          }\n        `;\r\n            }\r\n        }\r\n        else {\r\n            if (sidebarConfig.width.tablet == 0) {\r\n                css +=\r\n                    `\n          #customSidebar {\n            width:` +\r\n                        sidebarConfig.width.desktop +\r\n                        `%;\n            overflow:hidden;\n            display:none;\n            ${sidebarConfig.hideTopMenu ? '' : 'margin-top: calc(' + headerHeightPx + ' + env(safe-area-inset-top));'}\n          } \n          #view {\n            width:` +\r\n                        (100 - sidebarConfig.width.desktop) +\r\n                        `%;\n          ${sidebarConfig.hideTopMenu ? 'padding-top:0!important;margin-top:0!important;' : ''}\n          }\n        `;\r\n            }\r\n            else {\r\n                css +=\r\n                    `\n          #customSidebar {\n            width:` +\r\n                        sidebarConfig.width.desktop +\r\n                        `%;\n            overflow:hidden;\n            ${sidebarConfig.hideTopMenu ? '' : 'margin-top: calc(' + headerHeightPx + ' + env(safe-area-inset-top));'}\n          } \n          #view {\n            width:` +\r\n                        (100 - sidebarConfig.width.desktop) +\r\n                        `%;\n          ${sidebarConfig.hideTopMenu ? 'padding-top:0!important;margin-top:0!important;' : ''}\n          }\n        `;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        css +=\r\n            `\n      #customSidebar {\n        width:` +\r\n                sidebarWidth +\r\n                `%;\n        overflow:hidden;\n        ${sidebarConfig.hideTopMenu ? '' : 'margin-top: calc(' + headerHeightPx + ' + env(safe-area-inset-top));'}\n      } \n      #view {\n        width:` +\r\n                contentWidth +\r\n                `%;\n      ${sidebarConfig.hideTopMenu ? 'padding-top:0!important;margin-top:0!important;' : ''}\n      }\n    `;\r\n    }\r\n    return css;\r\n}\r\n// ##########################################################################################\r\n// ###   Helper methods\r\n// ##########################################################################################\r\nfunction getLovelace() {\r\n    let root = document.querySelector('home-assistant');\r\n    root = root && root.shadowRoot;\r\n    root = root && root.querySelector('home-assistant-main');\r\n    root = root && root.shadowRoot;\r\n    root = root && root.querySelector('ha-drawer partial-panel-resolver');\r\n    root = root && root.shadowRoot || root;\r\n    root = root && root.querySelector('ha-panel-lovelace');\r\n    root = root && root.shadowRoot;\r\n    root = root && root.querySelector('hui-root');\r\n    if (root) {\r\n        const ll = root.lovelace;\r\n        ll.current_view = root.___curView;\r\n        return ll;\r\n    }\r\n    return null;\r\n}\r\nasync function log2console(method, message, object) {\r\n    const lovelace = await getConfig();\r\n    if (lovelace.config.sidebar) {\r\n        const sidebarConfig = Object.assign({}, lovelace.config.sidebar);\r\n        if (sidebarConfig.debug === true) {\r\n            console.info(`%c${SIDEBAR_CARD_TITLE}: %c ${method.padEnd(24)} -> %c ${message}`, 'color: chartreuse; background: black; font-weight: 700;', 'color: yellow; background: black; font-weight: 700;', '', object);\r\n        }\r\n    }\r\n}\r\nasync function error2console(method, message, object) {\r\n    const lovelace = await getConfig();\r\n    if (lovelace.config.sidebar) {\r\n        const sidebarConfig = Object.assign({}, lovelace.config.sidebar);\r\n        if (sidebarConfig.debug === true) {\r\n            console.error(`%c${SIDEBAR_CARD_TITLE}: %c ${method.padEnd(24)} -> %c ${message}`, 'color: red; background: black; font-weight: 700;', 'color: white; background: black; font-weight: 700;', 'color:red', object);\r\n        }\r\n    }\r\n}\r\n// Returns the root element\r\nfunction getRoot() {\r\n    let root = document.querySelector('home-assistant');\r\n    root = root && root.shadowRoot;\r\n    root = root && root.querySelector('home-assistant-main');\r\n    root = root && root.shadowRoot;\r\n    root = root && root.querySelector('ha-drawer partial-panel-resolver');\r\n    root = (root && root.shadowRoot) || root;\r\n    root = root && root.querySelector('ha-panel-lovelace');\r\n    root = root && root.shadowRoot;\r\n    root = root && root.querySelector('hui-root');\r\n    return root;\r\n}\r\n// return var(--header-height) from #view element\r\n// We need to take from the div#view element in case of \"kiosk-mode\" module installation that defined new CSS var(--header-height) as local new variable, not available in div#customSidebar\r\nfunction getHeaderHeightPx() {\r\n    let headerHeightPx = '0px';\r\n    const root = getRoot();\r\n    const view = root.shadowRoot.getElementById('view');\r\n    //debugger;\r\n    if (view !== undefined && window.getComputedStyle(view) !== undefined) {\r\n        headerHeightPx = window.getComputedStyle(view).paddingTop;\r\n    }\r\n    return headerHeightPx;\r\n}\r\n// Returns the Home Assistant Sidebar element\r\nfunction getSidebar() {\r\n    let sidebar = document.querySelector('home-assistant');\r\n    sidebar = sidebar && sidebar.shadowRoot;\r\n    sidebar = sidebar && sidebar.querySelector('home-assistant-main');\r\n    sidebar = sidebar && sidebar.shadowRoot;\r\n    sidebar = sidebar && sidebar.querySelector('ha-drawer ha-sidebar');\r\n    return sidebar;\r\n}\r\n// Returns the Home Assistant app-drawer layout element\r\nfunction getAppDrawerLayout() {\r\n    let appDrawerLayout = document.querySelector('home-assistant');\r\n    appDrawerLayout = appDrawerLayout && appDrawerLayout.shadowRoot;\r\n    appDrawerLayout = appDrawerLayout && appDrawerLayout.querySelector('home-assistant-main');\r\n    appDrawerLayout = appDrawerLayout && appDrawerLayout.shadowRoot;\r\n    appDrawerLayout = appDrawerLayout && appDrawerLayout.querySelector('ha-drawer'); // ha-drawer\r\n    appDrawerLayout = appDrawerLayout && appDrawerLayout.shadowRoot;\r\n    appDrawerLayout = appDrawerLayout && appDrawerLayout.querySelector('.mdc-drawer-app-content');\r\n    return appDrawerLayout;\r\n}\r\n// Returns the Home Assistant app-drawer element\r\nfunction getAppDrawer() {\r\n    let appDrawer = document.querySelector('home-assistant');\r\n    appDrawer = appDrawer && appDrawer.shadowRoot;\r\n    appDrawer = appDrawer && appDrawer.querySelector('home-assistant-main');\r\n    appDrawer = appDrawer && appDrawer.shadowRoot;\r\n    appDrawer = appDrawer && appDrawer.querySelector('ha-drawer'); // ha-drawer\r\n    appDrawer = appDrawer && appDrawer.shadowRoot;\r\n    appDrawer = appDrawer && appDrawer.querySelector('.mdc-drawer');\r\n    return appDrawer;\r\n}\r\n// Returns a query parameter by its name\r\nfunction getParameterByName(name, url = window.location.href) {\r\n    const parameterName = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp('[?&]' + parameterName + '(=([^&#]*)|&|#|$)');\r\n    const results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n// hides (if requested) the HA header, HA footer and/or HA sidebar and hides this sidebar if configured so\r\nfunction updateStyling(appLayout, sidebarConfig) {\r\n    const width = document.body.clientWidth;\r\n    appLayout.querySelector('#customSidebarStyle').textContent = createCSS(sidebarConfig, width);\r\n    const root = getRoot();\r\n    const hassHeader = root.shadowRoot.querySelector('.header');\r\n    log2console('updateStyling', hassHeader ? 'Home Assistant header found!' : 'Home Assistant header not found!');\r\n    const hassFooter = root.shadowRoot.querySelector('ch-footer' || root.shadowRoot.querySelector('app-footer'));\r\n    log2console('updateStyling', hassFooter ? 'Home Assistant footer found!' : 'Home Assistant footer not found!');\r\n    const offParam = getParameterByName('sidebarOff');\r\n    const view = root.shadowRoot.getElementById('view');\r\n    let headerHeightPx = getHeaderHeightPx();\r\n    if (sidebarConfig.hideTopMenu && sidebarConfig.hideTopMenu === true && sidebarConfig.showTopMenuOnMobile && sidebarConfig.showTopMenuOnMobile === true && width <= sidebarConfig.breakpoints.mobile && offParam == null) {\r\n        if (hassHeader) {\r\n            log2console('updateStyling', 'Action: Show Home Assistant header!');\r\n            hassHeader.style.display = 'block';\r\n        }\r\n        if (view) {\r\n            view.style.minHeight = 'calc(100vh - ' + headerHeightPx + ')';\r\n        }\r\n        if (hassFooter) {\r\n            log2console('updateStyling', 'Action: Show Home Assistant footer!');\r\n            hassFooter.style.display = 'flex';\r\n        }\r\n    }\r\n    else if (sidebarConfig.hideTopMenu && sidebarConfig.hideTopMenu === true && offParam == null) {\r\n        if (hassHeader) {\r\n            log2console('updateStyling', 'Action: Hide Home Assistant header!');\r\n            hassHeader.style.display = 'none';\r\n        }\r\n        if (hassFooter) {\r\n            log2console('updateStyling', 'Action: Hide Home Assistant footer!');\r\n            hassFooter.style.display = 'none';\r\n        }\r\n        if (view) {\r\n            view.style.minHeight = 'calc(100vh)';\r\n        }\r\n    }\r\n}\r\n// watch and handle the resize and location-changed events\r\nfunction subscribeEvents(appLayout, sidebarConfig, contentContainer, sidebar) {\r\n    window.addEventListener('resize', function () {\r\n        updateStyling(appLayout, sidebarConfig);\r\n    }, true);\r\n    if ('hideOnPath' in sidebarConfig) {\r\n        window.addEventListener('location-changed', () => {\r\n            if (sidebarConfig.hideOnPath.includes(window.location.pathname)) {\r\n                contentContainer.classList.add('hideSidebar');\r\n                sidebar.classList.add('hide');\r\n            }\r\n            else {\r\n                contentContainer.classList.remove('hideSidebar');\r\n                sidebar.classList.remove('hide');\r\n            }\r\n        });\r\n        if (sidebarConfig.hideOnPath.includes(window.location.pathname)) {\r\n            log2console('subscribeEvents', 'Disable sidebar for this path');\r\n            contentContainer.classList.add('hideSidebar');\r\n            sidebar.classList.add('hide');\r\n        }\r\n    }\r\n}\r\nfunction watchLocationChange() {\r\n    setTimeout(() => {\r\n        window.addEventListener('location-changed', () => {\r\n            const root = getRoot();\r\n            if (!root)\r\n                return; // location changed before finishing dom rendering\r\n            const appLayout = root.shadowRoot.querySelector('div');\r\n            const customSidebarWrapper = appLayout.querySelector('#customSidebarWrapper');\r\n            if (!customSidebarWrapper) {\r\n                buildSidebar();\r\n            }\r\n            else {\r\n                const customSidebar = customSidebarWrapper.querySelector('#customSidebar');\r\n                if (!customSidebar) {\r\n                    buildSidebar();\r\n                }\r\n            }\r\n        });\r\n    }, 1000);\r\n}\r\n// build the custom sidebar card\r\nasync function buildCard(sidebar, config) {\r\n    const sidebarCard = document.createElement('sidebar-card');\r\n    sidebarCard.setConfig(config);\r\n    sidebarCard.hass = hass();\r\n    sidebar.appendChild(sidebarCard);\r\n}\r\n// non-blocking sleep function\r\nfunction sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n// gets the lovelace config\r\nasync function getConfig() {\r\n    let lovelace;\r\n    while (!lovelace) {\r\n        lovelace = getLovelace();\r\n        if (!lovelace) {\r\n            await sleep(500);\r\n        }\r\n    }\r\n    return lovelace;\r\n}\r\nfunction createElementFromHTML(htmlString) {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = htmlString.trim();\r\n    return div.firstChild;\r\n}\r\n// ##########################################################################################\r\n// ###   The Sidebar Card code base initialisation\r\n// ##########################################################################################\r\nasync function buildSidebar() {\r\n    const lovelace = await getConfig();\r\n    if (lovelace.config.sidebar) {\r\n        const sidebarConfig = Object.assign({}, lovelace.config.sidebar);\r\n        if (!sidebarConfig.width || (sidebarConfig.width && typeof sidebarConfig.width == 'number' && sidebarConfig.width > 0 && sidebarConfig.width < 100) || (sidebarConfig.width && typeof sidebarConfig.width == 'object')) {\r\n            const root = getRoot();\r\n            const hassSidebar = getSidebar();\r\n            const appDrawerLayout = getAppDrawerLayout();\r\n            const appDrawer = getAppDrawer();\r\n            const offParam = getParameterByName('sidebarOff');\r\n            if (sidebarConfig.hideTopMenu && sidebarConfig.hideTopMenu === true && offParam == null) {\r\n                if (root.shadowRoot.querySelector('ch-header'))\r\n                    root.shadowRoot.querySelector('ch-header').style.display = 'none';\r\n                if (root.shadowRoot.querySelector('app-header'))\r\n                    root.shadowRoot.querySelector('app-header').style.display = 'none';\r\n                if (root.shadowRoot.querySelector('ch-footer'))\r\n                    root.shadowRoot.querySelector('ch-footer').style.display = 'none';\r\n                if (root.shadowRoot.getElementById('view'))\r\n                    root.shadowRoot.getElementById('view').style.minHeight = 'calc(100vh)';\r\n            }\r\n            if (sidebarConfig.hideHassSidebar && sidebarConfig.hideHassSidebar === true && offParam == null) {\r\n                if (hassSidebar) {\r\n                    hassSidebar.style.display = 'none';\r\n                }\r\n                if (appDrawerLayout) {\r\n                    appDrawerLayout.style.marginLeft = '0';\r\n                    appDrawerLayout.style.paddingLeft = '0';\r\n                }\r\n                if (appDrawer) {\r\n                    appDrawer.style.display = 'none';\r\n                }\r\n            }\r\n            if (!sidebarConfig.breakpoints) {\r\n                sidebarConfig.breakpoints = {\r\n                    tablet: 1024,\r\n                    mobile: 768,\r\n                };\r\n            }\r\n            else if (sidebarConfig.breakpoints) {\r\n                if (!sidebarConfig.breakpoints.mobile) {\r\n                    sidebarConfig.breakpoints.mobile = 768;\r\n                }\r\n                if (!sidebarConfig.breakpoints.tablet) {\r\n                    sidebarConfig.breakpoints.tablet = 1024;\r\n                }\r\n            }\r\n            let appLayout = root.shadowRoot.querySelector('div');\r\n            let css = createCSS(sidebarConfig, document.body.clientWidth);\r\n            let style = document.createElement('style');\r\n            style.setAttribute('id', 'customSidebarStyle');\r\n            appLayout.appendChild(style);\r\n            style.type = 'text/css';\r\n            if (style.styleSheet) {\r\n                // This is required for IE8 and below.\r\n                style.styleSheet.cssText = css;\r\n            }\r\n            else {\r\n                style.appendChild(document.createTextNode(css));\r\n            }\r\n            // get element to wrap\r\n            let contentContainer = appLayout.querySelector('#view');\r\n            // create wrapper container\r\n            const wrapper = document.createElement('div');\r\n            wrapper.setAttribute('id', 'customSidebarWrapper');\r\n            // insert wrapper before el in the DOM tree\r\n            contentContainer.parentNode.insertBefore(wrapper, contentContainer);\r\n            // move el into wrapper\r\n            let sidebar = document.createElement('div');\r\n            sidebar.setAttribute('id', 'customSidebar');\r\n            wrapper.appendChild(sidebar);\r\n            wrapper.appendChild(contentContainer);\r\n            await buildCard(sidebar, sidebarConfig);\r\n            //updateStyling(appLayout, sidebarConfig);\r\n            subscribeEvents(appLayout, sidebarConfig, contentContainer, sidebar);\r\n            setTimeout(function () {\r\n                updateStyling(appLayout, sidebarConfig);\r\n            }, 1);\r\n        }\r\n        else {\r\n            error2console('buildSidebar', 'Error sidebar in width config!');\r\n        }\r\n    }\r\n    else {\r\n        log2console('buildSidebar', 'No sidebar in config found!');\r\n    }\r\n}\r\n// show console message on init\r\nconsole.info(`%c  ${SIDEBAR_CARD_TITLE.padEnd(24)}%c\n  Version: ${SIDEBAR_CARD_VERSION.padEnd(9)}      `, 'color: chartreuse; background: black; font-weight: 700;', 'color: white; background: dimgrey; font-weight: 700;');\r\nbuildSidebar();\r\nwatchLocationChange();\r\n","references":["/Users/markus/Desktop/HA - Dinge und Software/sidebar-card/github sidebar/sidebar-card/node_modules/lit-element/lit-element.d.ts","/Users/markus/Desktop/HA - Dinge und Software/sidebar-card/github sidebar/sidebar-card/node_modules/card-tools/src/more-info.js","/Users/markus/Desktop/HA - Dinge und Software/sidebar-card/github sidebar/sidebar-card/node_modules/card-tools/src/hass.js","/Users/markus/Desktop/HA - Dinge und Software/sidebar-card/github sidebar/sidebar-card/node_modules/card-tools/src/templates.js","/Users/markus/Desktop/HA - Dinge und Software/sidebar-card/github sidebar/sidebar-card/node_modules/moment/min/moment-with-locales.js","/Users/markus/Desktop/HA - Dinge und Software/sidebar-card/github sidebar/sidebar-card/node_modules/custom-card-helpers/dist/index.d.ts"]}
