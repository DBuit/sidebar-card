{"code":"/**\r\n * Apply a theme to an element by setting the CSS variables on it.\r\n *\r\n * element: Element to apply theme on.\r\n * themes: HASS Theme information\r\n * localTheme: selected theme.\r\n * updateMeta: boolean if we should update the theme-color meta element.\r\n */\r\nexport const applyThemesOnElement = (element, themes, localTheme, updateMeta = false) => {\r\n    if (!element._themes) {\r\n        element._themes = {};\r\n    }\r\n    let themeName = themes.default_theme;\r\n    if (localTheme === \"default\" || (localTheme && themes.themes[localTheme])) {\r\n        themeName = localTheme;\r\n    }\r\n    const styles = { ...element._themes };\r\n    if (themeName !== \"default\") {\r\n        const theme = themes.themes[themeName];\r\n        Object.keys(theme).forEach((key) => {\r\n            const prefixedKey = \"--\" + key;\r\n            element._themes[prefixedKey] = \"\";\r\n            styles[prefixedKey] = theme[key];\r\n        });\r\n    }\r\n    if (element.updateStyles) {\r\n        element.updateStyles(styles);\r\n    }\r\n    else if (window.ShadyCSS) {\r\n        // implement updateStyles() method of Polemer elements\r\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */ (element), styles);\r\n    }\r\n    if (!updateMeta) {\r\n        return;\r\n    }\r\n    const meta = document.querySelector(\"meta[name=theme-color]\");\r\n    if (meta) {\r\n        if (!meta.hasAttribute(\"default-content\")) {\r\n            meta.setAttribute(\"default-content\", meta.getAttribute(\"content\"));\r\n        }\r\n        const themeColor = styles[\"--primary-color\"] || meta.getAttribute(\"default-content\");\r\n        meta.setAttribute(\"content\", themeColor);\r\n    }\r\n};\r\n//# sourceMappingURL=apply_themes_on_element.js.map","map":"{\"version\":3,\"file\":\"apply_themes_on_element.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/apply_themes_on_element.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,OAAO,EACP,MAAM,EACN,UAAU,EACV,UAAU,GAAG,KAAK,EAClB,EAAE;IACF,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;QACpB,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC;KACtB;IACD,IAAI,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC;IACrC,IAAI,UAAU,KAAK,SAAS,IAAI,CAAC,UAAU,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE;QACzE,SAAS,GAAG,UAAU,CAAC;KACxB;IACD,MAAM,MAAM,GAAG,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IACtC,IAAI,SAAS,KAAK,SAAS,EAAE;QAC3B,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACvC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACjC,MAAM,WAAW,GAAG,IAAI,GAAG,GAAG,CAAC;YAC/B,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;KACJ;IACD,IAAI,OAAO,CAAC,YAAY,EAAE;QACxB,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;KAC9B;SAAM,IAAK,MAAc,CAAC,QAAQ,EAAE;QACnC,sDAAsD;QACrD,MAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,2BAA2B,CAAC,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;KACtF;IAED,IAAI,CAAC,UAAU,EAAE;QACf,OAAO;KACR;IAED,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;IAC9D,IAAI,IAAI,EAAE;QACR,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE;YACzC,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAE,CAAC,CAAC;SACrE;QACD,MAAM,UAAU,GACd,MAAM,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;KAC1C;AACH,CAAC,CAAA\"}","dts":{"name":"/home/iantrich/Projects/hass/plugins/custom-card-helpers/apply_themes_on_element.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Apply a theme to an element by setting the CSS variables on it.\r\n *\r\n * element: Element to apply theme on.\r\n * themes: HASS Theme information\r\n * localTheme: selected theme.\r\n * updateMeta: boolean if we should update the theme-color meta element.\r\n */\r\nexport declare const applyThemesOnElement: (element: any, themes: any, localTheme: any, updateMeta?: boolean) => void;\r\n"}}
