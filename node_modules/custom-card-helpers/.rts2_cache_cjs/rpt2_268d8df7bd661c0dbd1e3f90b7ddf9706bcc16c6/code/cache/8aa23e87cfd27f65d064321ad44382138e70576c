{"code":"/**\r\n * Formats a number based on the specified language with thousands separator(s) and decimal character for better legibility.\r\n * @param num The number to format\r\n * @param language The language to use when formatting the number\r\n */\r\nexport const formatNumber = (num, language, options) => {\r\n    // Polyfill for Number.isNaN, which is more reliable than the global isNaN()\r\n    Number.isNaN =\r\n        Number.isNaN ||\r\n            function isNaN(input) {\r\n                return typeof input === \"number\" && isNaN(input);\r\n            };\r\n    if (!Number.isNaN(Number(num)) && Intl) {\r\n        return new Intl.NumberFormat(language, getDefaultFormatOptions(num, options)).format(Number(num));\r\n    }\r\n    return num.toString();\r\n};\r\n/**\r\n * Generates default options for Intl.NumberFormat\r\n * @param num The number to be formatted\r\n * @param options The Intl.NumberFormatOptions that should be included in the returned options\r\n */\r\nconst getDefaultFormatOptions = (num, options) => {\r\n    const defaultOptions = options || {};\r\n    if (typeof num !== \"string\") {\r\n        return defaultOptions;\r\n    }\r\n    // Keep decimal trailing zeros if they are present in a string numeric value\r\n    if (!options ||\r\n        (!options.minimumFractionDigits && !options.maximumFractionDigits)) {\r\n        const digits = num.indexOf(\".\") > -1 ? num.split(\".\")[1].length : 0;\r\n        defaultOptions.minimumFractionDigits = digits;\r\n        defaultOptions.maximumFractionDigits = digits;\r\n    }\r\n    return defaultOptions;\r\n};\r\n//# sourceMappingURL=format-number.js.map","map":"{\"version\":3,\"file\":\"format-number.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/format-number.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,GAAoB,EACpB,QAAgB,EAChB,OAAkC,EAC1B,EAAE;IACV,4EAA4E;IAC5E,MAAM,CAAC,KAAK;QACV,MAAM,CAAC,KAAK;YACZ,SAAS,KAAK,CAAC,KAAK;gBAClB,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;YACnD,CAAC,CAAC;IAEJ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,EAAE;QACtC,OAAO,IAAI,IAAI,CAAC,YAAY,CAC1B,QAAQ,EACR,uBAAuB,CAAC,GAAG,EAAE,OAAO,CAAC,CACtC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;KACvB;IACD,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,uBAAuB,GAAG,CAC9B,GAAoB,EACpB,OAAkC,EACR,EAAE;IAC5B,MAAM,cAAc,GAA6B,OAAO,IAAI,EAAE,CAAC;IAE/D,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,OAAO,cAAc,CAAC;KACvB;IAED,4EAA4E;IAC5E,IACE,CAAC,OAAO;QACR,CAAC,CAAC,OAAO,CAAC,qBAAqB,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAClE;QACA,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,cAAc,CAAC,qBAAqB,GAAG,MAAM,CAAC;QAC9C,cAAc,CAAC,qBAAqB,GAAG,MAAM,CAAC;KAC/C;IAED,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC\"}","dts":{"name":"/home/iantrich/Projects/hass/plugins/custom-card-helpers/format-number.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Formats a number based on the specified language with thousands separator(s) and decimal character for better legibility.\r\n * @param num The number to format\r\n * @param language The language to use when formatting the number\r\n */\r\nexport declare const formatNumber: (num: string | number, language: string, options?: Intl.NumberFormatOptions) => string;\r\n"}}
