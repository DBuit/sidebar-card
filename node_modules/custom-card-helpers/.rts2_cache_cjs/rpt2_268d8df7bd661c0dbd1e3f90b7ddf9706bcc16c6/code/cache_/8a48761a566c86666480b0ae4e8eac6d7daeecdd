{"code":"import { NumberFormat } from \"./types\";\r\n/**\r\n * Formats a number based on the specified language with thousands separator(s) and decimal character for better legibility.\r\n * @param num The number to format\r\n * @param locale The user-selected language and number format, from `hass.locale`\r\n * @param options Intl.NumberFormatOptions to use\r\n */\r\nexport const formatNumber = (num, locale, options) => {\r\n    let format;\r\n    switch (locale?.number_format) {\r\n        case NumberFormat.comma_decimal:\r\n            format = [\"en-US\", \"en\"]; // Use United States with fallback to English formatting 1,234,567.89\r\n            break;\r\n        case NumberFormat.decimal_comma:\r\n            format = [\"de\", \"es\", \"it\"]; // Use German with fallback to Spanish then Italian formatting 1.234.567,89\r\n            break;\r\n        case NumberFormat.space_comma:\r\n            format = [\"fr\", \"sv\", \"cs\"]; // Use French with fallback to Swedish and Czech formatting 1 234 567,89\r\n            break;\r\n        case NumberFormat.system:\r\n            format = undefined;\r\n            break;\r\n        default:\r\n            format = locale?.language;\r\n    }\r\n    // Polyfill for Number.isNaN, which is more reliable than the global isNaN()\r\n    Number.isNaN =\r\n        Number.isNaN ||\r\n            function isNaN(input) {\r\n                return typeof input === \"number\" && isNaN(input);\r\n            };\r\n    if (!Number.isNaN(Number(num)) &&\r\n        Intl &&\r\n        locale?.number_format !== NumberFormat.none) {\r\n        try {\r\n            return new Intl.NumberFormat(format, getDefaultFormatOptions(num, options)).format(Number(num));\r\n        }\r\n        catch (error) {\r\n            // Don't fail when using \"TEST\" language\r\n            // eslint-disable-next-line no-console\r\n            console.error(error);\r\n            return new Intl.NumberFormat(undefined, getDefaultFormatOptions(num, options)).format(Number(num));\r\n        }\r\n    }\r\n    return num ? num.toString() : \"\";\r\n};\r\n/**\r\n * Generates default options for Intl.NumberFormat\r\n * @param num The number to be formatted\r\n * @param options The Intl.NumberFormatOptions that should be included in the returned options\r\n */\r\nconst getDefaultFormatOptions = (num, options) => {\r\n    const defaultOptions = options || {};\r\n    if (typeof num !== \"string\") {\r\n        return defaultOptions;\r\n    }\r\n    // Keep decimal trailing zeros if they are present in a string numeric value\r\n    if (!options ||\r\n        (!options.minimumFractionDigits && !options.maximumFractionDigits)) {\r\n        const digits = num.indexOf(\".\") > -1 ? num.split(\".\")[1].length : 0;\r\n        defaultOptions.minimumFractionDigits = digits;\r\n        defaultOptions.maximumFractionDigits = digits;\r\n    }\r\n    return defaultOptions;\r\n};\r\n//# sourceMappingURL=format-number.js.map","map":"{\"version\":3,\"file\":\"format-number.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/format-number.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAA2B,YAAY,EAAE,MAAM,SAAS,CAAC;AAEhE;;;;;GAKG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,GAAoB,EACpB,MAAgC,EAChC,OAAkC,EAC1B,EAAE;IAEV,IAAI,MAAqC,CAAC;IAE1C,QAAQ,MAAM,EAAE,aAAa,EAAE;QAC7B,KAAK,YAAY,CAAC,aAAa;YAC7B,MAAM,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,qEAAqE;YAC/F,MAAM;QACR,KAAK,YAAY,CAAC,aAAa;YAC7B,MAAM,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,2EAA2E;YACxG,MAAM;QACR,KAAK,YAAY,CAAC,WAAW;YAC3B,MAAM,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,wEAAwE;YACrG,MAAM;QACR,KAAK,YAAY,CAAC,MAAM;YACtB,MAAM,GAAG,SAAS,CAAC;YACnB,MAAM;QACR;YACE,MAAM,GAAG,MAAM,EAAE,QAAQ,CAAC;KAC7B;IACD,4EAA4E;IAC5E,MAAM,CAAC,KAAK;QACV,MAAM,CAAC,KAAK;YACZ,SAAS,KAAK,CAAC,KAAK;gBAClB,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;YACnD,CAAC,CAAC;IAEF,IACE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAI;QACJ,MAAM,EAAE,aAAa,KAAK,YAAY,CAAC,IAAI,EAC3C;QACA,IAAI;YACF,OAAO,IAAI,IAAI,CAAC,YAAY,CAC1B,MAAM,EACN,uBAAuB,CAAC,GAAG,EAAE,OAAO,CAAC,CACtC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;SACvB;QAAC,OAAO,KAAK,EAAE;YACd,wCAAwC;YACxC,sCAAsC;YACtC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,IAAI,IAAI,CAAC,YAAY,CAC1B,SAAS,EACT,uBAAuB,CAAC,GAAG,EAAE,OAAO,CAAC,CACtC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;SACvB;KACF;IACD,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;AACrC,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,uBAAuB,GAAG,CAC9B,GAAoB,EACpB,OAAkC,EACR,EAAE;IAC5B,MAAM,cAAc,GAA6B,OAAO,IAAI,EAAE,CAAC;IAE/D,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,OAAO,cAAc,CAAC;KACvB;IAED,4EAA4E;IAC5E,IACE,CAAC,OAAO;QACR,CAAC,CAAC,OAAO,CAAC,qBAAqB,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAClE;QACA,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,cAAc,CAAC,qBAAqB,GAAG,MAAM,CAAC;QAC9C,cAAc,CAAC,qBAAqB,GAAG,MAAM,CAAC;KAC/C;IAED,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC\"}","dts":{"name":"/home/iantrich/Projects/hass/plugins/custom-card-helpers/format-number.d.ts","writeByteOrderMark":false,"text":"import { FrontendTranslationData } from \"./types\";\r\n/**\r\n * Formats a number based on the specified language with thousands separator(s) and decimal character for better legibility.\r\n * @param num The number to format\r\n * @param locale The user-selected language and number format, from `hass.locale`\r\n * @param options Intl.NumberFormatOptions to use\r\n */\r\nexport declare const formatNumber: (num: string | number, locale?: FrontendTranslationData, options?: Intl.NumberFormatOptions) => string;\r\n"}}
