{"code":"/**\r\n * Returns a function, that, as long as it continues to be invoked, will not be triggered. It will be called after it stops being called for `wait` ms.\r\n * This can be usefull for ResizeObservers for example.\r\n * @param func The function you want to debounce\r\n * @param wait Period to wait in ms\r\n * @param immediate Triggering on the leading edge instead of the trailing\r\n * @returns Debounced Function\r\n */\r\n// eslint-disable-next-line: ban-types\r\nexport const debounce = (func, wait, immediate = false) => {\r\n    let timeout;\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    return function (...args) {\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const context = this;\r\n        const later = () => {\r\n            timeout = null;\r\n            if (!immediate) {\r\n                func.apply(context, args);\r\n            }\r\n        };\r\n        const callNow = immediate && !timeout;\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait);\r\n        if (callNow) {\r\n            func.apply(context, args);\r\n        }\r\n    };\r\n};\r\n//# sourceMappingURL=debounce.js.map","map":"{\"version\":3,\"file\":\"debounce.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/debounce.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;GAOG;AACH,sCAAsC;AACtC,MAAM,CAAC,MAAM,QAAQ,GAAG,CACtB,IAAO,EACP,IAAY,EACZ,SAAS,GAAG,KAAK,EACd,EAAE;IACL,IAAI,OAAO,CAAC;IACZ,6DAA6D;IAC7D,aAAa;IACb,OAAO,UAAU,GAAG,IAAI;QACtB,6DAA6D;QAC7D,aAAa;QACb,4DAA4D;QAC5D,MAAM,OAAO,GAAG,IAAI,CAAC;QACrB,MAAM,KAAK,GAAG,GAAG,EAAE;YACjB,OAAO,GAAG,IAAI,CAAC;YACf,IAAI,CAAC,SAAS,EAAE;gBACd,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC;QACF,MAAM,OAAO,GAAG,SAAS,IAAI,CAAC,OAAO,CAAC;QACtC,YAAY,CAAC,OAAO,CAAC,CAAC;QACtB,OAAO,GAAG,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAClC,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;SAC3B;IACH,CAAC,CAAC;AACJ,CAAC,CAAC\"}","dts":{"name":"/home/iantrich/Projects/hass/plugins/custom-card-helpers/debounce.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Returns a function, that, as long as it continues to be invoked, will not be triggered. It will be called after it stops being called for `wait` ms.\r\n * This can be usefull for ResizeObservers for example.\r\n * @param func The function you want to debounce\r\n * @param wait Period to wait in ms\r\n * @param immediate Triggering on the leading edge instead of the trailing\r\n * @returns Debounced Function\r\n */\r\nexport declare const debounce: <T extends (...args: any[]) => unknown>(func: T, wait: number, immediate?: boolean) => T;\r\n"}}
